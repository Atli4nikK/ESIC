import streamlit as st
import numpy as np
import onnxruntime as ort
from PIL import Image
import torchvision.transforms as transforms
import pandas as pd
import os
import hashlib
from datetime import datetime

# –ü—É—Ç–∏
FEEDBACK_FILE = "./web/feedback.csv"
IMAGE_FOLDER = "./web/feedback_images"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
os.makedirs(IMAGE_FOLDER, exist_ok=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (SHA256)
def get_image_hash(image):
    image_bytes = image.tobytes()
    return hashlib.sha256(image_bytes).hexdigest()


# –ó–∞–≥—Ä—É–∑–∫–∞ ONNX –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    return ort.InferenceSession("./train/convert/converted_models/model.onnx")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(std=[0.3481, 0.3755, 0.3738], mean=[0.6722, 0.6039, 0.6150]),
    ])
    image = transform(image).unsqueeze(0).numpy()
    return image


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
def predict(image, model, class_names):
    input_tensor = preprocess_image(image)
    outputs = model.run(None, {"input": input_tensor})
    probabilities = np.exp(outputs[0]) / np.sum(np.exp(outputs[0]))  # Softmax
    return probabilities[0]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
def save_feedback(image, predicted_class, correct_class, probabilities):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_hash = get_image_hash(image)
    image_path = os.path.join(IMAGE_FOLDER, f"{image_hash}.png")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    if not os.path.exists(image_path):
        image.save(image_path)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ CSV
    feedback_data = pd.DataFrame([{
        "timestamp": timestamp,
        "image_path": image_path,
        "predicted_class": predicted_class,
        "correct_class": correct_class,
        "probabilities": probabilities
    }])

    if os.path.exists(FEEDBACK_FILE):
        feedback_data.to_csv(FEEDBACK_FILE, mode="a", header=False, index=False)
    else:
        feedback_data.to_csv(FEEDBACK_FILE, index=False)


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
def main():
    st.set_page_config(page_title="ESIC", page_icon="üöëüöíüöì")
    st.title("üöëüöíüöì Emergency Services Image Classifier")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

    # –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
    class_names = ["Ambulance", "Fire", "Police"]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ONNX
    model = load_model()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

        # –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        st.write("üîç **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:**")
        probabilities = predict(image, model, class_names)
        predicted_class = class_names[np.argmax(probabilities)]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±–∏–∫–æ–≤
        for class_name, probability in zip(class_names, probabilities):
            st.write(f"{class_name}: {probability:.2%}")
            st.progress(float(probability))

        # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        st.subheader(f"üè∑Ô∏è –ú–æ–¥–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ: **{predicted_class}**")

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏—è
        col1, col2 = st.columns(2)

        with col1:
            if st.button("‚úÖ –í–µ—Ä–Ω–æ"):
                st.success("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                save_feedback(image, predicted_class, predicted_class, probabilities.tolist())

        with col2:
            if st.button("‚ùå –ù–µ–≤–µ—Ä–Ω–æ"):
                st.session_state.feedback_mode = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                st.session_state.feedback_submitted = False  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–µ–≤–µ—Ä–Ω–æ", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
        if st.session_state.get("feedback_mode", False) and not st.session_state.get("feedback_submitted", False):
            st.session_state.correct_class = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å:", class_names)

            if st.button("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"):
                save_feedback(image, predicted_class, st.session_state.correct_class, probabilities.tolist())
                st.session_state.feedback_submitted = True
                st.success(f"–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å: {st.session_state.correct_class}")
                st.session_state.feedback_mode = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è


if __name__ == '__main__':
    main()
